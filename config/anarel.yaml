# Maintain the packages we want to install into a miniconda anarel environment.
# support variants on a anarel, like anarel-py3 anarel-gpu

# the format of this file is
# -  list of stage 1 packages
# -  list of stage 2 packages, ect
#
# after each stage, ana-rel-manage will test the new packages just installed, as well as
# retest the previous packages installed. In this was we can see 
# if installing some later package causes problems for an earlier package.

# each stage is a list of packages. We can specify a version, and then a full package
# build string for different variants, or specify that we should skip a package for
# a given variant. We can also specify a channel for channels not in the condarc files

# ana-rel-manage will add the appropriate python version when creating, so we don't
# list python below.

# syntax for a package
#  packagename:
#    ver: '=1.0.0'  or '>=1.0' or latest, note we need '' around the specification, and
#         we need to start numbers with = or >, latest means just let conda get the latest
#         version of the package
#    py3ver: '=1.0.1' if for some reason the python three installation requires a different
#                     version, specify it here 
#    bld: lfs_verbs_100   full package build string, for the default py27 opt anarelease
#    dbg: blah            likewise for the py27 debug release
#    gpu: blah            likewise for the gpu py27 opt release
#    py3: blah            likwise fot eh py3 opt release
#                     you can also put the string skip here, important for py3
#    chl: the channel to find the package in, fully qualified file urls, or off of anaconda for things
#         like conda-forge, ect, only needed if channel is not in condarc
                   
-
    # I couldn't import psana with python=2.7.13
  python:
    ver: '=2.7.12'
    py3ver: '=3.5'
  
  dbg:
    ver: latest
    only_in_variant: dbg

  gpu:
    ver: latest
    only_in_variant: gpu

  # with the cudnn now built against cuda 8.5, conda we need to
  # specify the build string
  cudnn:
    ver: '=5.1'
    gpu: 'cuda8.0_2'
    only_in_variant: gpu
  
  openmpi:
    ver: '=1.10.6'

  szip:
    ver: '=2.1'

  hdf5:
    ver: '=1.8.18'

  ipython:
    ver: latest

  nose:
    ver: latest

  numpy:
    ver: latest

  scipy:
    ver: latest

  h5py:
    ver: '=2.7.0'

  mpi4py:
    ver: '=2.0.0'

  pytables:
    ver: '=3.3.0'

  scons:
    ver: latest
    py3: skip

  cython:
    ver: latest

  boost:
    ver: '=1.57.0'
    py3ver: '=1.60.0'
    # moving to 1.60.0 got the boost_python lib to load, but there
    # are still other boost libraries that don't load

  ndarray-psana:
    ver: latest

  # we build psana with 4.8.5, I don't think building with 4.8.7 works
  # but spyder doesn't work with 4.8.5, however psana seems to run  with 4.8.7
  qt:
    ver: '=4.8.7'

  matplotlib:
    ver: latest

  pyzmq:
    ver: latest

# generally good things, most users might expect want, some part of psana uses
  pylint:
    ver: latest

  coverage:
    ver: latest

  # pinning jinja2 since 2.9.5 brakes the DDL
  # see https://github.com/slaclab/anarel-manage/issues/32
  jinja2:
    ver: '=2.8.1'
  # forcing newer pandas version, this now comes from conda forge, because default channel stopped building against numpy 1.11.
  # To fix this issuse we have to update to qt5 to get a recent version of matplotlib and a recent version of numpy
  pandas:
    ver: '=0.20.2'
  
  pillow:
    ver: latest

  pyqt:
    ver: '=4.11.4'

  pyqtgraph:
    ver: latest

  # 2.6.0 is the latest, but it crashes pandas 0.19.0 and 0.19.1
  # https://github.com/pandas-dev/pandas/issues/14621
  python-dateutil:
    ver: '=2.5.3'

  scikit-beam:
    ver: latest

  scikit-learn:
    ver: latest

  anaconda-client:
    ver: latest

  pyyaml:
    ver: latest

  curl:
    ver: latest

  git:
    ver: latest
    
  lxml:
    ver: latest
    
  cssselect:
    ver: latest

  # we usually get sphinx anyways, but just be explicit
  sphinx:
    ver: latest
      
  APScheduler:
    ver: latest

  cmake:
    ver: latest
    
  notebook:
    ver: latest

  jupyter:
    ver: latest

  virtualenv:
    ver: latest

  requests:
    ver: latest

  simplejson:
    ver: latest

  # zmq.backend.cffi won't import without this, still doesn't seem to import with it?
  cffi:
    ver: latest

  # also a zmq backend?
  gevent:
    ver: latest

  # for the zmq.test module
  pytest:
    ver: latest

  # for pyqtgraph.opengl, maybe we don't need this?
  pyopengl:
    ver: latest

  # for ipykernel.test, and tensorflow
  mock:
    ver: latest

  # for pyPsanaMonit
  psutil:
    ver: latest

  # looks useful, uses psutil, in defaults
  memory_profiler:
    ver: latest

  # for h5serv, if we want to try it, watchdog is on conda-forge
  watchdog:
    ver: latest
    
  # for Jason
  xarray:
    ver: latest

  dask:
    ver: latest

  bottleneck:
    ver: latest

  seaborn:
    ver: latest  

  # based on Marco's environments
  joblib:
    ver: latest

  bokeh:
    ver: latest

  # from Marco - pseudo terminal
  ptyprocess:
    ver: latest

  # Don't include mkl-rt - it brakes a scipy test, see https://jira.slac.stanford.edu/browse/PSRT-150

  mkl-service:
    ver: latest
    
  spyder:
    ver: latest

  # for jason, from conda-forge
  cyordereddict:
    ver: latest

  # for jason, from conda-forge
  h5netcdf:
    ver: latest

  # add a progress bar to your for loops, from conda-forge, pure python
  tqdm:
    ver: latest

  # add web stuff for Chris O' Grady - hashtag interface
  click:
    ver: latest

  Flask:
    ver: latest

  itsdangerous:
    ver: latest

  tzlocal:
    ver: latest

  werkzeug:
    ver: latest

  # chuck says this is good  
  plotly:
    ver: latest

  # pypi packaging recommend this, comes from condaforge
  twine:
    ver: latest

  eigen:
    ver: latest
  
  # for pyPsanaMonit I got an error
  # trying to install it in the py3 build
  guppy:
    ver: latest
    py3: skip

  psana-conda:
    ver: '=1.2.12'
    py3: skip

  theano:
    ver: latest

  logbookclient:
    ver: latest
    py3: skip

  kerberos:
    ver: '=1.2.5'
    py3: skip

  pscache:
    ver: latest
    py3: skip

  psgeom:
    ver: latest
    py3: skip

  # Clemens suggests
  numba:
    ver: latest

  # some things that look good from https://docs.continuum.io/anaconda/pkg-docs
  # machine learning - but natural language processing
  nltk:
    ver: latest

  # I think also machine learning, natural language processing
  gensim:
    ver: latest

  # a deep learning framework
  neon:
    ver: latest

  # Bayesian Stochastic Modelling
  pymc:
    ver: latest

  # using python to run ssh commands in other places, Igor liked this 
  paramiko:
    ver: latest

  # sphinx 
  numpydoc:
    ver: latest

  # Python multithreaded job distribution module
  workerpool:
    ver: latest

  # Data compression software with high compression ratio
  xz:
    ver: latest

  # Module for decorators, wrappers and monkey patching
  wrapt:
    ver: latest

#  this looks good, but on py3 changed a lot of other packages
#  # 3D computer graphics, image processing, and visualization
#  vtk:
#    ver: latest
#     py3: skip

  # A system for controlling process state under UNIX, not on python 3
  supervisor:
    ver: latest
    py3: skip

  # A compiler that integrates C and C++ with a variety of languages 
  swig:
    ver: latest

  # Python library for symbolic mathematics
  sympy:
    ver: latest

  # super sparse multi-class machine learning 
  thinc:
    ver: latest

  # Chuck suggests: https://github.com/slaclab/anarel-manage/issues/4
  biopython:
    ver: latest

  # some users were using this for analysis
  pyabel:
    ver: latest

  # for lc2-hdf5 work, C++ interface to yaml, this is in our local channel,
  # need c++11 for this
  yaml-cpp:
    ver: latest
    limit_os: rhel7
    
  # For Mikhail, Chris, Timur, binary distribution from http://www.roentdek.com/
  # in our local channel, now people can develop against it
  # it is only tested in rhel7, we'll put in rhel6 rhel5 for now, but it probably 
  # doesn't run there
  hexanode-proxy:
    ver: latest

  # for Wilko, Jacob, maintaining this in our channels to get later version from pypi
  kafka-python:
    ver: latest
#-
# with tensorflow 1.1.0, it needs protobuf 3.2.0, but it is in defaults, Apr/17
#  protobuf:
# I think tensorflow will pickup what it needs in its dependencies
# tensorflow v1.0.0 and v0.12.0 needs protobuf 3.1.0 which is not (as of Feb/17) 
# in conda-forge but it is in jjhelmus
#  
#    ver: '=3.1.0'
#    chl: jjhelmus

-
# We will use our own channel for tensorflow to get the latest version and a 
# gpu version - this should pick up the appropriate protobuf from defaults or conda-forge
# note rev10 gpu is against cuda 7.5, but rev 11 and higher is against cuda 8

  tensorflow:
    ver: '=1.1.0'
    gpu: py27_gpu_1
    py3: py35_1
    limit_os: rhel7
  
  keras:
    ver: latest

  jupyterhub:
    ver: latest
    only_in_variant: py3
    limit_os: rhel7

  blaze:
    ver: latest

# I was thinking about getting xgboost - wins a lot of kaggle competitions - 
#but it is not standard, the channel creditx
# has the latest version, but it also brings in libgcc 5.2.0, so I won't do it right now.

# also want to get runipy to run ipython notebooks, but it brings in ipython-notebook, do we
# need that or does it conflict with jupyter?

-
# Murali ran into this bug, https://github.com/conda-forge/conda-forge.github.io/issues/189â€‹, in the py3 enviornment,
# so we'll overwrite the defaults readline with the conda-forge one (should get at least readline=6.2) this will also replace
# ncurses with the conda-forge build 

  readline:
    ver: latest
    chl: conda-forge
    
# also want bug fixes in later version of gunicorn than what defaults has
  gunicorn:
    ver: latest
    chl: conda-forge

# eventlet is our default web service threading framework
  eventlet:
    ver: latest
    chl: conda-forge

# The batch processing and other push service use this
  flask-socketio:
    ver: latest
    chl: conda-forge

# Interesting bugs when you use subprocess and threading are fixed using subprocess32 instead of subprocess.
  subprocess32:
    ver: latest
    chl: conda-forge
    py3: skip

-
  opencv:
    ver: '>=3'

# Chuck is using cbf from this channel, note, an earlier build was only against
# numpy 1.9 and we couldn't install it, but now it seems to introduce no 
# changes to our environments, however it does add a .egg and .pth file,
# I'm not sure I want those in the environments, we won't put it in for now
#-
#  cbf:
#    ver: latest
#    chl: paulscherrerinstitute
 
